// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns a welcome message with available sets and file types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get welcome message",
                "responses": {
                    "200": {
                        "description": "Welcome message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/parse/{set_name}": {
            "get": {
                "description": "Parses a file for a given set and file type, or all files for a set. If direct=true, parses directly; otherwise, forwards to Server A.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parsing"
                ],
                "summary": "Parse a specific file or all files for a set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set name (e.g., books, movies)",
                        "name": "set_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to parse directly (default: false)",
                        "name": "direct",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parsed data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid set name or file type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/parse/{set_name}/{file_type}": {
            "get": {
                "description": "Parses a file for a given set and file type, or all files for a set. If direct=true, parses directly; otherwise, forwards to Server A.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parsing"
                ],
                "summary": "Parse a specific file or all files for a set",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set name (e.g., books, movies)",
                        "name": "set_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File type (e.g., txt, xml, yaml, json, csv)",
                        "name": "file_type",
                        "in": "path"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to parse directly (default: false)",
                        "name": "direct",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parsed data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid set name or file type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Data Parsing Server (Server B - Go)",
	Description:      "This is a data parsing server implemented in Go (Server B). It can parse data files directly or forward requests to Server A.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
